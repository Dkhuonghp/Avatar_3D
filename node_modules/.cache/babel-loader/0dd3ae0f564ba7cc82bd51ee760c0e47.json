{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/khuong/Downloads/avatar-homepage-demo-forked/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"../../../build/three.module.js\";\nimport { BufferGeometryUtils } from \"../utils/BufferGeometryUtils.js\";\n\nvar EdgeSplitModifier = function EdgeSplitModifier() {\n  var A = new Vector3();\n  var B = new Vector3();\n  var C = new Vector3();\n  var positions, normals;\n  var indexes;\n  var pointToIndexMap, splitIndexes;\n\n  function computeNormals() {\n    normals = new Float32Array(indexes.length * 3);\n\n    for (var i = 0; i < indexes.length; i += 3) {\n      var index = indexes[i];\n      A.set(positions[3 * index], positions[3 * index + 1], positions[3 * index + 2]);\n      index = indexes[i + 1];\n      B.set(positions[3 * index], positions[3 * index + 1], positions[3 * index + 2]);\n      index = indexes[i + 2];\n      C.set(positions[3 * index], positions[3 * index + 1], positions[3 * index + 2]);\n      C.sub(B);\n      A.sub(B);\n      var normal = C.cross(A).normalize();\n\n      for (var j = 0; j < 3; j++) {\n        normals[3 * (i + j)] = normal.x;\n        normals[3 * (i + j) + 1] = normal.y;\n        normals[3 * (i + j) + 2] = normal.z;\n      }\n    }\n  }\n\n  function mapPositionsToIndexes() {\n    pointToIndexMap = Array(positions.length / 3);\n\n    for (var i = 0; i < indexes.length; i++) {\n      var index = indexes[i];\n\n      if (pointToIndexMap[index] == null) {\n        pointToIndexMap[index] = [];\n      }\n\n      pointToIndexMap[index].push(i);\n    }\n  }\n\n  function edgeSplitToGroups(indexes, cutOff, firstIndex) {\n    A.set(normals[3 * firstIndex], normals[3 * firstIndex + 1], normals[3 * firstIndex + 2]).normalize();\n    var result = {\n      splitGroup: [],\n      currentGroup: [firstIndex]\n    };\n\n    var _iterator = _createForOfIteratorHelper(indexes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var j = _step.value;\n\n        if (j !== firstIndex) {\n          B.set(normals[3 * j], normals[3 * j + 1], normals[3 * j + 2]).normalize();\n\n          if (B.dot(A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  }\n\n  function edgeSplit(indexes, cutOff) {\n    var original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (indexes.length === 0) return;\n    var groupResults = [];\n\n    var _iterator2 = _createForOfIteratorHelper(indexes),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        groupResults.push(edgeSplitToGroups(indexes, cutOff, index));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var result = groupResults[0];\n\n    for (var _i = 0, _groupResults = groupResults; _i < _groupResults.length; _i++) {\n      var groupResult = _groupResults[_i];\n\n      if (groupResult.currentGroup.length > result.currentGroup.length) {\n        result = groupResult;\n      }\n    }\n\n    if (original != null) {\n      splitIndexes.push({\n        original: original,\n        indexes: result.currentGroup\n      });\n    }\n\n    if (result.splitGroup.length) {\n      edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n    }\n  }\n\n  this.modify = function (geometry, cutOffAngle) {\n    if (!geometry.isBufferGeometry) {\n      geometry = new BufferGeometry().fromGeometry(geometry);\n    }\n\n    if (geometry.index == null) {\n      if (BufferGeometryUtils === undefined) {\n        throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n      }\n\n      geometry = BufferGeometryUtils.mergeVertices(geometry);\n    }\n\n    indexes = geometry.index.array;\n    positions = geometry.getAttribute(\"position\").array;\n    computeNormals();\n    mapPositionsToIndexes();\n    splitIndexes = [];\n\n    var _iterator3 = _createForOfIteratorHelper(pointToIndexMap),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var vertexIndexes = _step3.value;\n        edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var newPositions = new Float32Array(positions.length + 3 * splitIndexes.length);\n    newPositions.set(positions);\n    var offset = positions.length;\n    var newIndexes = new Uint32Array(indexes.length);\n    newIndexes.set(indexes);\n\n    for (var i = 0; i < splitIndexes.length; i++) {\n      var split = splitIndexes[i];\n      var index = indexes[split.original];\n      newPositions[offset + 3 * i] = positions[3 * index];\n      newPositions[offset + 3 * i + 1] = positions[3 * index + 1];\n      newPositions[offset + 3 * i + 2] = positions[3 * index + 2];\n\n      var _iterator4 = _createForOfIteratorHelper(split.indexes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var j = _step4.value;\n          newIndexes[j] = offset / 3 + i;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n\n    geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(newPositions, 3, true));\n    geometry.setIndex(new BufferAttribute(newIndexes, 1));\n    return geometry;\n  };\n};\n\nexport { EdgeSplitModifier };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Vector3","BufferGeometryUtils","EdgeSplitModifier","A","B","C","positions","normals","indexes","pointToIndexMap","splitIndexes","computeNormals","Float32Array","length","i","index","set","sub","normal","cross","normalize","j","x","y","z","mapPositionsToIndexes","Array","push","edgeSplitToGroups","cutOff","firstIndex","result","splitGroup","currentGroup","dot","edgeSplit","original","groupResults","groupResult","modify","geometry","cutOffAngle","isBufferGeometry","fromGeometry","undefined","mergeVertices","array","getAttribute","vertexIndexes","Math","cos","newPositions","offset","newIndexes","Uint32Array","split","setAttribute","setIndex"],"sources":["/Users/khuong/Downloads/avatar-homepage-demo-forked/node_modules/three/examples/jsm/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tVector3\n} from \"../../../build/three.module.js\";\nimport { BufferGeometryUtils } from \"../utils/BufferGeometryUtils.js\";\n\n\nvar EdgeSplitModifier = function () {\n\n\tvar A = new Vector3();\n\tvar B = new Vector3();\n\tvar C = new Vector3();\n\n\tvar positions, normals;\n\tvar indexes;\n\tvar pointToIndexMap, splitIndexes;\n\n\n\tfunction computeNormals() {\n\n\t\tnormals = new Float32Array( indexes.length * 3 );\n\n\t\tfor ( var i = 0; i < indexes.length; i += 3 ) {\n\n\t\t\tvar index = indexes[ i ];\n\n\t\t\tA.set(\n\t\t\t\tpositions[ 3 * index ],\n\t\t\t\tpositions[ 3 * index + 1 ],\n\t\t\t\tpositions[ 3 * index + 2 ] );\n\n\t\t\tindex = indexes[ i + 1 ];\n\t\t\tB.set(\n\t\t\t\tpositions[ 3 * index ],\n\t\t\t\tpositions[ 3 * index + 1 ],\n\t\t\t\tpositions[ 3 * index + 2 ] );\n\n\t\t\tindex = indexes[ i + 2 ];\n\t\t\tC.set(\n\t\t\t\tpositions[ 3 * index ],\n\t\t\t\tpositions[ 3 * index + 1 ],\n\t\t\t\tpositions[ 3 * index + 2 ] );\n\n\t\t\tC.sub( B );\n\t\t\tA.sub( B );\n\n\t\t\tvar normal = C.cross( A ).normalize();\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tnormals[ 3 * ( i + j ) ] = normal.x;\n\t\t\t\tnormals[ 3 * ( i + j ) + 1 ] = normal.y;\n\t\t\t\tnormals[ 3 * ( i + j ) + 2 ] = normal.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tfunction mapPositionsToIndexes() {\n\n\t\tpointToIndexMap = Array( positions.length / 3 );\n\n\t\tfor ( var i = 0; i < indexes.length; i ++ ) {\n\n\t\t\tvar index = indexes[ i ];\n\n\t\t\tif ( pointToIndexMap[ index ] == null ) {\n\n\t\t\t\tpointToIndexMap[ index ] = [];\n\n\t\t\t}\n\n\t\t\tpointToIndexMap[ index ].push( i );\n\n\t\t}\n\n\t}\n\n\n\tfunction edgeSplitToGroups( indexes, cutOff, firstIndex ) {\n\n\t\tA.set( normals[ 3 * firstIndex ], normals[ 3 * firstIndex + 1 ], normals[ 3 * firstIndex + 2 ] ).normalize();\n\n\t\tvar result = {\n\t\t\tsplitGroup: [],\n\t\t\tcurrentGroup: [ firstIndex ]\n\t\t};\n\n\t\tfor ( var j of indexes ) {\n\n\t\t\tif ( j !== firstIndex ) {\n\n\t\t\t\tB.set( normals[ 3 * j ], normals[ 3 * j + 1 ], normals[ 3 * j + 2 ] ).normalize();\n\n\t\t\t\tif ( B.dot( A ) < cutOff ) {\n\n\t\t\t\t\tresult.splitGroup.push( j );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult.currentGroup.push( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\n\tfunction edgeSplit( indexes, cutOff, original = null ) {\n\n\t\tif ( indexes.length === 0 ) return;\n\n\t\tvar groupResults = [];\n\n\t\tfor ( var index of indexes ) {\n\n\t\t\tgroupResults.push( edgeSplitToGroups( indexes, cutOff, index ) );\n\n\t\t}\n\n\t\tvar result = groupResults[ 0 ];\n\n\t\tfor ( var groupResult of groupResults ) {\n\n\t\t\tif ( groupResult.currentGroup.length > result.currentGroup.length ) {\n\n\t\t\t\tresult = groupResult;\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif ( original != null ) {\n\n\t\t\tsplitIndexes.push( {\n\t\t\t\toriginal: original,\n\t\t\t\tindexes: result.currentGroup\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( result.splitGroup.length ) {\n\n\t\t\tedgeSplit( result.splitGroup, cutOff, original || result.currentGroup[ 0 ] );\n\n\t\t}\n\n\t}\n\n\n\tthis.modify = function ( geometry, cutOffAngle ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tgeometry = new BufferGeometry().fromGeometry( geometry );\n\n\t\t}\n\n\n\t\tif ( geometry.index == null ) {\n\n\t\t\tif ( BufferGeometryUtils === undefined ) {\n\n\t\t\t \tthrow 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n\n\t\t\t}\n\n\t\t\tgeometry = BufferGeometryUtils.mergeVertices( geometry );\n\n\t\t}\n\n\t\tindexes = geometry.index.array;\n\t\tpositions = geometry.getAttribute( \"position\" ).array;\n\n\t\tcomputeNormals();\n\t\tmapPositionsToIndexes();\n\n\n\t\tsplitIndexes = [];\n\n\t\tfor ( var vertexIndexes of pointToIndexMap ) {\n\n\t\t\tedgeSplit( vertexIndexes, Math.cos( cutOffAngle ) - 0.001 );\n\n\t\t}\n\n\t\tvar newPositions = new Float32Array( positions.length + 3 * splitIndexes.length );\n\t\tnewPositions.set( positions );\n\t\tvar offset = positions.length;\n\n\t\tvar newIndexes = new Uint32Array( indexes.length );\n\t\tnewIndexes.set( indexes );\n\n\t\tfor ( var i = 0; i < splitIndexes.length; i ++ ) {\n\n\t\t\tvar split = splitIndexes[ i ];\n\t\t\tvar index = indexes[ split.original ];\n\n\t\t\tnewPositions[ offset + 3 * i ] = positions[ 3 * index ];\n\t\t\tnewPositions[ offset + 3 * i + 1 ] = positions[ 3 * index + 1 ];\n\t\t\tnewPositions[ offset + 3 * i + 2 ] = positions[ 3 * index + 2 ];\n\n\t\t\tfor ( var j of split.indexes ) {\n\n\t\t\t\tnewIndexes[ j ] = offset / 3 + i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( newPositions, 3, true ) );\n\t\tgeometry.setIndex( new BufferAttribute( newIndexes, 1 ) );\n\n\t\treturn geometry;\n\n\t};\n\n};\n\nexport { EdgeSplitModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}