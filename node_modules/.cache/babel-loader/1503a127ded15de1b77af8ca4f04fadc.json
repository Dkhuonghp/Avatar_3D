{"ast":null,"code":"import _objectSpread from \"/Users/khuong/Downloads/avatar-homepage-demo-forked/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/khuong/Downloads/avatar-homepage-demo-forked/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { tw as p, hash as y } from \"..\";\n\nvar f = function f(n) {\n  var e = new WeakMap(),\n      s = function s(c) {\n    function i() {\n      return c(this);\n    }\n\n    var t = new Map(),\n        l = function l(o, r) {\n      return typeof r == \"function\" ? c(r) : r;\n    };\n\n    return function (o) {\n      var r = JSON.stringify(o, l),\n          a = t.get(r);\n      return a || (a = Object.defineProperties(n(o, r), {\n        valueOf: {\n          value: i\n        },\n        toString: {\n          value: i\n        },\n        toJSON: {\n          value: function value() {\n            return o;\n          }\n        }\n      }), t.set(r, a), t.size > 1e4 && t.delete(t.keys().next().value)), a;\n    };\n  };\n\n  return function (c) {\n    var i = this || p,\n        t = e.get(i);\n    return t || (t = s(i), e.set(i, t)), t(c);\n  };\n},\n    S = f(function (n) {\n  var e = function e() {\n    return n;\n  };\n\n  return function (_ref) {\n    var s = _ref.tw;\n    return s(e);\n  };\n}),\n    u = f(function (n, e) {\n  var s = y(e),\n      c = function c() {\n    return _defineProperty({}, \"@keyframes \".concat(s), n);\n  };\n\n  return function (_ref3) {\n    var i = _ref3.tw;\n    return i(c), s;\n  };\n});\n\nfunction m(n, e) {\n  return S.call(this, _objectSpread(_objectSpread({}, typeof n == \"object\" ? n : {\n    animation: n\n  }), {}, {\n    animationName: typeof e == \"function\" ? e : u.call(this, e)\n  }));\n}\n\nexport { m as animation, S as css, u as keyframes };","map":{"version":3,"sources":["../../src/css/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TW, CSSRules, CSSAtKeyframes, InlineDirective, Context } from '../types'\n\nimport { tw as defaultTW, hash } from '../index'\n\nexport interface LazyInjected {\n  valueOf: () => string\n  toString: () => string\n}\n\nexport interface CSSDirective extends LazyInjected {\n  (context: { tw: TW }): CSSRules\n}\n\nconst create = <P, R>(\n  factory: (parameter: P, key: string) => InlineDirective,\n): ((parameter: P) => R) => {\n  type Instance = (parameter: P) => R\n\n  // Cache css directive by their JSON stringified value\n  const instances = new WeakMap<TW, Instance>()\n\n  const build = (tw: TW): Instance => {\n    // Allows to invoke toString() on a directive:\n    // document.body.className = css({ color: 'white' })\n    function toString(this: InlineDirective): string {\n      return tw(this)\n    }\n\n    const cache = new Map<string, R>()\n\n    const evaluateFunctions = (key: string, value: unknown): unknown =>\n      typeof value === 'function' ? tw(value as InlineDirective) : value\n\n    return (rules: P): R => {\n      const key = JSON.stringify(rules, evaluateFunctions)\n\n      let directive = cache.get(key)\n\n      if (!directive) {\n        directive = Object.defineProperties(factory(rules, key), {\n          valueOf: {\n            value: toString,\n          },\n          toString: {\n            value: toString,\n          },\n          // Allow twind to generate a unique id for this inline directive\n          // twind uses JSON.stringify which returns undefined for functions like this directive\n          // providing a toJSON function allows to include this directive in the id generation\n          toJSON: {\n            value: () => rules,\n          },\n        }) as R\n\n        cache.set(key, directive)\n\n        // Ensure the cache does not grow unlimited\n        if (cache.size > 10000) {\n          cache.delete(cache.keys().next().value)\n        }\n      }\n\n      return directive\n    }\n  }\n\n  return function (this: TW | null | undefined | void, rules: P): R {\n    const tw = this || defaultTW\n\n    let instance = instances.get(tw)\n\n    if (!instance) {\n      instance = build(tw)\n      instances.set(tw, instance)\n    }\n\n    return instance(rules)\n  }\n}\n\nexport const css = create<CSSRules, CSSDirective>((rules) => {\n  const plugin: InlineDirective = () => rules\n\n  return ({ tw }) => tw(plugin)\n})\n\nexport interface CSSKeyframes extends LazyInjected {\n  (context: Context): string\n}\n\n/**\n *\n * ```js\n * const bounce = keyframes({\n *   'from, 20%, 53%, 80%, to': {\n *     transform: 'translate3d(0,0,0)',\n *   },\n *   '40%, 43%': {\n *     transform: 'translate3d(0, -30px, 0)',\n *   },\n *   '70%': {\n *     transform: 'translate3d(0, -15px, 0)',\n *   },\n *   '90%': {\n *     transform: 'translate3d(0, -4px, 0)',\n *   }\n * })\n *\n * css({\n *   animation: `${bounce} 1s ease infinite`,\n * })\n * ```\n * @param waypoints\n */\nexport const keyframes = create<CSSAtKeyframes, CSSKeyframes>((waypoints, key) => {\n  const id = hash(key)\n\n  // tw caches inline plugins by the identity\n  const plugin: InlineDirective = () => ({\n    [`@keyframes ${id}`]: waypoints,\n  })\n\n  return ({ tw }) => {\n    // Inject the keyframes\n    tw(plugin)\n    // but return the keyframe id\n    return id\n  }\n})\n\n/**\n *\n * ```js\n * const bounce = animation('1s ease infinite', {\n *   'from, 20%, 53%, 80%, to': {\n *     transform: 'translate3d(0,0,0)',\n *   },\n *   '40%, 43%': {\n *     transform: 'translate3d(0, -30px, 0)',\n *   },\n *   '70%': {\n *     transform: 'translate3d(0, -15px, 0)',\n *   },\n *   '90%': {\n *     transform: 'translate3d(0, -4px, 0)',\n *   }\n * })\n * ```\n */\nexport function animation(\n  this: TW | null | undefined | void,\n  value: string | CSSRules | ((context: Context) => string),\n  waypoints: CSSAtKeyframes | CSSKeyframes,\n): CSSDirective {\n  return css.call(this, {\n    ...(typeof value === 'object' ? value : { animation: value }),\n    animationName: typeof waypoints === 'function' ? waypoints : keyframes.call(this, waypoints),\n  })\n}\n"]},"metadata":{},"sourceType":"module"}