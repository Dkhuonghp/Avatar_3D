{"ast":null,"code":"import { Vector3, Vector4 } from \"../../../build/three.module.js\";\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\nvar NURBSUtils = {\n  /*\n  Finds knot vector span.\n  \tp : degree\n  u : parametric value\n  U : knot vector\n  \treturns the span\n  */\n  findSpan: function findSpan(p, u, U) {\n    var n = U.length - p - 1;\n\n    if (u >= U[n]) {\n      return n - 1;\n    }\n\n    if (u <= U[p]) {\n      return p;\n    }\n\n    var low = p;\n    var high = n;\n    var mid = Math.floor((low + high) / 2);\n\n    while (u < U[mid] || u >= U[mid + 1]) {\n      if (u < U[mid]) {\n        high = mid;\n      } else {\n        low = mid;\n      }\n\n      mid = Math.floor((low + high) / 2);\n    }\n\n    return mid;\n  },\n\n  /*\n  Calculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n  \tspan : span in which u lies\n  u    : parametric point\n  p    : degree\n  U    : knot vector\n  \treturns array[p+1] with basis functions values.\n  */\n  calcBasisFunctions: function calcBasisFunctions(span, u, p, U) {\n    var N = [];\n    var left = [];\n    var right = [];\n    N[0] = 1.0;\n\n    for (var j = 1; j <= p; ++j) {\n      left[j] = u - U[span + 1 - j];\n      right[j] = U[span + j] - u;\n      var saved = 0.0;\n\n      for (var r = 0; r < j; ++r) {\n        var rv = right[r + 1];\n        var lv = left[j - r];\n        var temp = N[r] / (rv + lv);\n        N[r] = saved + rv * temp;\n        saved = lv * temp;\n      }\n\n      N[j] = saved;\n    }\n\n    return N;\n  },\n\n  /*\n  Calculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n  \tp : degree of B-Spline\n  U : knot vector\n  P : control points (x, y, z, w)\n  u : parametric point\n  \treturns point for given u\n  */\n  calcBSplinePoint: function calcBSplinePoint(p, U, P, u) {\n    var span = this.findSpan(p, u, U);\n    var N = this.calcBasisFunctions(span, u, p, U);\n    var C = new Vector4(0, 0, 0, 0);\n\n    for (var j = 0; j <= p; ++j) {\n      var point = P[span - p + j];\n      var Nj = N[j];\n      var wNj = point.w * Nj;\n      C.x += point.x * wNj;\n      C.y += point.y * wNj;\n      C.z += point.z * wNj;\n      C.w += point.w * Nj;\n    }\n\n    return C;\n  },\n\n  /*\n  Calculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n  \tspan : span in which u lies\n  u    : parametric point\n  p    : degree\n  n    : number of derivatives to calculate\n  U    : knot vector\n  \treturns array[n+1][p+1] with basis functions derivatives\n  */\n  calcBasisFunctionDerivatives: function calcBasisFunctionDerivatives(span, u, p, n, U) {\n    var zeroArr = [];\n\n    for (var i = 0; i <= p; ++i) {\n      zeroArr[i] = 0.0;\n    }\n\n    var ders = [];\n\n    for (var i = 0; i <= n; ++i) {\n      ders[i] = zeroArr.slice(0);\n    }\n\n    var ndu = [];\n\n    for (var i = 0; i <= p; ++i) {\n      ndu[i] = zeroArr.slice(0);\n    }\n\n    ndu[0][0] = 1.0;\n    var left = zeroArr.slice(0);\n    var right = zeroArr.slice(0);\n\n    for (var j = 1; j <= p; ++j) {\n      left[j] = u - U[span + 1 - j];\n      right[j] = U[span + j] - u;\n      var saved = 0.0;\n\n      for (var r = 0; r < j; ++r) {\n        var rv = right[r + 1];\n        var lv = left[j - r];\n        ndu[j][r] = rv + lv;\n        var temp = ndu[r][j - 1] / ndu[j][r];\n        ndu[r][j] = saved + rv * temp;\n        saved = lv * temp;\n      }\n\n      ndu[j][j] = saved;\n    }\n\n    for (var j = 0; j <= p; ++j) {\n      ders[0][j] = ndu[j][p];\n    }\n\n    for (var r = 0; r <= p; ++r) {\n      var s1 = 0;\n      var s2 = 1;\n      var a = [];\n\n      for (var i = 0; i <= p; ++i) {\n        a[i] = zeroArr.slice(0);\n      }\n\n      a[0][0] = 1.0;\n\n      for (var k = 1; k <= n; ++k) {\n        var d = 0.0;\n        var rk = r - k;\n        var pk = p - k;\n\n        if (r >= k) {\n          a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n          d = a[s2][0] * ndu[rk][pk];\n        }\n\n        var j1 = rk >= -1 ? 1 : -rk;\n        var j2 = r - 1 <= pk ? k - 1 : p - r;\n\n        for (var j = j1; j <= j2; ++j) {\n          a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n          d += a[s2][j] * ndu[rk + j][pk];\n        }\n\n        if (r <= pk) {\n          a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n          d += a[s2][k] * ndu[r][pk];\n        }\n\n        ders[k][r] = d;\n        var j = s1;\n        s1 = s2;\n        s2 = j;\n      }\n    }\n\n    var r = p;\n\n    for (var k = 1; k <= n; ++k) {\n      for (var j = 0; j <= p; ++j) {\n        ders[k][j] *= r;\n      }\n\n      r *= p - k;\n    }\n\n    return ders;\n  },\n\n  /*\n  \tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n  \t\tp  : degree\n  \tU  : knot vector\n  \tP  : control points\n  \tu  : Parametric points\n  \tnd : number of derivatives\n  \t\treturns array[d+1] with derivatives\n  \t*/\n  calcBSplineDerivatives: function calcBSplineDerivatives(p, U, P, u, nd) {\n    var du = nd < p ? nd : p;\n    var CK = [];\n    var span = this.findSpan(p, u, U);\n    var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n    var Pw = [];\n\n    for (var i = 0; i < P.length; ++i) {\n      var point = P[i].clone();\n      var w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      Pw[i] = point;\n    }\n\n    for (var k = 0; k <= du; ++k) {\n      var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n      for (var j = 1; j <= p; ++j) {\n        point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n      }\n\n      CK[k] = point;\n    }\n\n    for (var k = du + 1; k <= nd + 1; ++k) {\n      CK[k] = new Vector4(0, 0, 0);\n    }\n\n    return CK;\n  },\n\n  /*\n  Calculate \"K over I\"\n  \treturns k!/(i!(k-i)!)\n  */\n  calcKoverI: function calcKoverI(k, i) {\n    var nom = 1;\n\n    for (var j = 2; j <= k; ++j) {\n      nom *= j;\n    }\n\n    var denom = 1;\n\n    for (var j = 2; j <= i; ++j) {\n      denom *= j;\n    }\n\n    for (var j = 2; j <= k - i; ++j) {\n      denom *= j;\n    }\n\n    return nom / denom;\n  },\n\n  /*\n  Calculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n  \tPders : result of function calcBSplineDerivatives\n  \treturns array with derivatives for rational curve.\n  */\n  calcRationalCurveDerivatives: function calcRationalCurveDerivatives(Pders) {\n    var nd = Pders.length;\n    var Aders = [];\n    var wders = [];\n\n    for (var i = 0; i < nd; ++i) {\n      var point = Pders[i];\n      Aders[i] = new Vector3(point.x, point.y, point.z);\n      wders[i] = point.w;\n    }\n\n    var CK = [];\n\n    for (var k = 0; k < nd; ++k) {\n      var v = Aders[k].clone();\n\n      for (var i = 1; i <= k; ++i) {\n        v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n      }\n\n      CK[k] = v.divideScalar(wders[0]);\n    }\n\n    return CK;\n  },\n\n  /*\n  Calculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n  \tp  : degree\n  U  : knot vector\n  P  : control points in homogeneous space\n  u  : parametric points\n  nd : number of derivatives\n  \treturns array with derivatives.\n  */\n  calcNURBSDerivatives: function calcNURBSDerivatives(p, U, P, u, nd) {\n    var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n    return this.calcRationalCurveDerivatives(Pders);\n  },\n\n  /*\n  Calculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n  \tp1, p2 : degrees of B-Spline surface\n  U1, U2 : knot vectors\n  P      : control points (x, y, z, w)\n  u, v   : parametric values\n  \treturns point for given (u, v)\n  */\n  calcSurfacePoint: function calcSurfacePoint(p, q, U, V, P, u, v, target) {\n    var uspan = this.findSpan(p, u, U);\n    var vspan = this.findSpan(q, v, V);\n    var Nu = this.calcBasisFunctions(uspan, u, p, U);\n    var Nv = this.calcBasisFunctions(vspan, v, q, V);\n    var temp = [];\n\n    for (var l = 0; l <= q; ++l) {\n      temp[l] = new Vector4(0, 0, 0, 0);\n\n      for (var k = 0; k <= p; ++k) {\n        var point = P[uspan - p + k][vspan - q + l].clone();\n        var w = point.w;\n        point.x *= w;\n        point.y *= w;\n        point.z *= w;\n        temp[l].add(point.multiplyScalar(Nu[k]));\n      }\n    }\n\n    var Sw = new Vector4(0, 0, 0, 0);\n\n    for (var l = 0; l <= q; ++l) {\n      Sw.add(temp[l].multiplyScalar(Nv[l]));\n    }\n\n    Sw.divideScalar(Sw.w);\n    target.set(Sw.x, Sw.y, Sw.z);\n  }\n};\nexport { NURBSUtils };","map":{"version":3,"names":["Vector3","Vector4","NURBSUtils","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"sources":["/Users/khuong/Downloads/avatar-homepage-demo-forked/node_modules/three/examples/jsm/curves/NURBSUtils.js"],"sourcesContent":["import {\n\tVector3,\n\tVector4\n} from \"../../../build/three.module.js\";\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\nvar NURBSUtils = {\n\n\t/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\tfindSpan: function ( p, u, U ) {\n\n\t\tvar n = U.length - p - 1;\n\n\t\tif ( u >= U[ n ] ) {\n\n\t\t\treturn n - 1;\n\n\t\t}\n\n\t\tif ( u <= U[ p ] ) {\n\n\t\t\treturn p;\n\n\t\t}\n\n\t\tvar low = p;\n\t\tvar high = n;\n\t\tvar mid = Math.floor( ( low + high ) / 2 );\n\n\t\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\t\tif ( u < U[ mid ] ) {\n\n\t\t\t\thigh = mid;\n\n\t\t\t} else {\n\n\t\t\t\tlow = mid;\n\n\t\t\t}\n\n\t\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t\t}\n\n\t\treturn mid;\n\n\t},\n\n\n\t/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\tcalcBasisFunctions: function ( span, u, p, U ) {\n\n\t\tvar N = [];\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tN[ 0 ] = 1.0;\n\n\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\tvar saved = 0.0;\n\n\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\tvar temp = N[ r ] / ( rv + lv );\n\t\t\t\tN[ r ] = saved + rv * temp;\n\t\t\t\tsaved = lv * temp;\n\n\t\t\t }\n\n\t\t\t N[ j ] = saved;\n\n\t\t }\n\n\t\t return N;\n\n\t},\n\n\n\t/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\tcalcBSplinePoint: function ( p, U, P, u ) {\n\n\t\tvar span = this.findSpan( p, u, U );\n\t\tvar N = this.calcBasisFunctions( span, u, p, U );\n\t\tvar C = new Vector4( 0, 0, 0, 0 );\n\n\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\tvar point = P[ span - p + j ];\n\t\t\tvar Nj = N[ j ];\n\t\t\tvar wNj = point.w * Nj;\n\t\t\tC.x += point.x * wNj;\n\t\t\tC.y += point.y * wNj;\n\t\t\tC.z += point.z * wNj;\n\t\t\tC.w += point.w * Nj;\n\n\t\t}\n\n\t\treturn C;\n\n\t},\n\n\n\t/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\tcalcBasisFunctionDerivatives: function ( span, u, p, n, U ) {\n\n\t\tvar zeroArr = [];\n\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\tzeroArr[ i ] = 0.0;\n\n\t\tvar ders = [];\n\t\tfor ( var i = 0; i <= n; ++ i )\n\t\t\tders[ i ] = zeroArr.slice( 0 );\n\n\t\tvar ndu = [];\n\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\t\tndu[ 0 ][ 0 ] = 1.0;\n\n\t\tvar left = zeroArr.slice( 0 );\n\t\tvar right = zeroArr.slice( 0 );\n\n\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\tvar saved = 0.0;\n\n\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\t\tvar temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\t\tsaved = lv * temp;\n\n\t\t\t}\n\n\t\t\tndu[ j ][ j ] = saved;\n\n\t\t}\n\n\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t\t}\n\n\t\tfor ( var r = 0; r <= p; ++ r ) {\n\n\t\t\tvar s1 = 0;\n\t\t\tvar s2 = 1;\n\n\t\t\tvar a = [];\n\t\t\tfor ( var i = 0; i <= p; ++ i ) {\n\n\t\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t\t}\n\n\t\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\t\tvar d = 0.0;\n\t\t\t\tvar rk = r - k;\n\t\t\t\tvar pk = p - k;\n\n\t\t\t\tif ( r >= k ) {\n\n\t\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tvar j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\t\tvar j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\t\tfor ( var j = j1; j <= j2; ++ j ) {\n\n\t\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( r <= pk ) {\n\n\t\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tders[ k ][ r ] = d;\n\n\t\t\t\tvar j = s1;\n\t\t\t\ts1 = s2;\n\t\t\t\ts2 = j;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar r = p;\n\n\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\tders[ k ][ j ] *= r;\n\n\t\t\t}\n\n\t\t\tr *= p - k;\n\n\t\t}\n\n\t\treturn ders;\n\n\t},\n\n\n\t/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\tcalcBSplineDerivatives: function ( p, U, P, u, nd ) {\n\n\t\tvar du = nd < p ? nd : p;\n\t\tvar CK = [];\n\t\tvar span = this.findSpan( p, u, U );\n\t\tvar nders = this.calcBasisFunctionDerivatives( span, u, p, du, U );\n\t\tvar Pw = [];\n\n\t\tfor ( var i = 0; i < P.length; ++ i ) {\n\n\t\t\tvar point = P[ i ].clone();\n\t\t\tvar w = point.w;\n\n\t\t\tpoint.x *= w;\n\t\t\tpoint.y *= w;\n\t\t\tpoint.z *= w;\n\n\t\t\tPw[ i ] = point;\n\n\t\t}\n\n\t\tfor ( var k = 0; k <= du; ++ k ) {\n\n\t\t\tvar point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t\t}\n\n\t\t\tCK[ k ] = point;\n\n\t\t}\n\n\t\tfor ( var k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\t\tCK[ k ] = new Vector4( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn CK;\n\n\t},\n\n\n\t/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\tcalcKoverI: function ( k, i ) {\n\n\t\tvar nom = 1;\n\n\t\tfor ( var j = 2; j <= k; ++ j ) {\n\n\t\t\tnom *= j;\n\n\t\t}\n\n\t\tvar denom = 1;\n\n\t\tfor ( var j = 2; j <= i; ++ j ) {\n\n\t\t\tdenom *= j;\n\n\t\t}\n\n\t\tfor ( var j = 2; j <= k - i; ++ j ) {\n\n\t\t\tdenom *= j;\n\n\t\t}\n\n\t\treturn nom / denom;\n\n\t},\n\n\n\t/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\tcalcRationalCurveDerivatives: function ( Pders ) {\n\n\t\tvar nd = Pders.length;\n\t\tvar Aders = [];\n\t\tvar wders = [];\n\n\t\tfor ( var i = 0; i < nd; ++ i ) {\n\n\t\t\tvar point = Pders[ i ];\n\t\t\tAders[ i ] = new Vector3( point.x, point.y, point.z );\n\t\t\twders[ i ] = point.w;\n\n\t\t}\n\n\t\tvar CK = [];\n\n\t\tfor ( var k = 0; k < nd; ++ k ) {\n\n\t\t\tvar v = Aders[ k ].clone();\n\n\t\t\tfor ( var i = 1; i <= k; ++ i ) {\n\n\t\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( this.calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t\t}\n\n\t\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t\t}\n\n\t\treturn CK;\n\n\t},\n\n\n\t/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\tcalcNURBSDerivatives: function ( p, U, P, u, nd ) {\n\n\t\tvar Pders = this.calcBSplineDerivatives( p, U, P, u, nd );\n\t\treturn this.calcRationalCurveDerivatives( Pders );\n\n\t},\n\n\n\t/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\tcalcSurfacePoint: function ( p, q, U, V, P, u, v, target ) {\n\n\t\tvar uspan = this.findSpan( p, u, U );\n\t\tvar vspan = this.findSpan( q, v, V );\n\t\tvar Nu = this.calcBasisFunctions( uspan, u, p, U );\n\t\tvar Nv = this.calcBasisFunctions( vspan, v, q, V );\n\t\tvar temp = [];\n\n\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\ttemp[ l ] = new Vector4( 0, 0, 0, 0 );\n\t\t\tfor ( var k = 0; k <= p; ++ k ) {\n\n\t\t\t\tvar point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\t\tvar w = point.w;\n\t\t\t\tpoint.x *= w;\n\t\t\t\tpoint.y *= w;\n\t\t\t\tpoint.z *= w;\n\t\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar Sw = new Vector4( 0, 0, 0, 0 );\n\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t\t}\n\n\t\tSw.divideScalar( Sw.w );\n\t\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n\t}\n\n};\n\nexport { NURBSUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}