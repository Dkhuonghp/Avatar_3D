{"ast":null,"code":"import { BufferGeometry, Face3, Geometry } from \"../../../build/three.module.js\";\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nvar TessellateModifier = function TessellateModifier() {\n  var maxEdgeLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n  var maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var maxFaces = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  this.maxEdgeLength = maxEdgeLength;\n  this.maxIterations = maxIterations;\n  this.maxFaces = maxFaces;\n}; // Applies the \"modify\" pattern\n\n\nTessellateModifier.prototype.modify = function (geometry) {\n  var isBufferGeometry = geometry.isBufferGeometry;\n\n  if (isBufferGeometry) {\n    geometry = new Geometry().fromBufferGeometry(geometry);\n  } else {\n    geometry = geometry.clone();\n  }\n\n  geometry.mergeVertices(6);\n  var finalized = false;\n  var iteration = 0;\n  var maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n  var edge;\n\n  while (!finalized && iteration < this.maxIterations && geometry.faces.length < this.maxFaces) {\n    var faces = [];\n    var faceVertexUvs = [];\n    finalized = true;\n    iteration++;\n\n    for (var i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n      faceVertexUvs[i] = [];\n    }\n\n    for (var i = 0, il = geometry.faces.length; i < il; i++) {\n      var face = geometry.faces[i];\n\n      if (face instanceof Face3) {\n        var a = face.a;\n        var b = face.b;\n        var c = face.c;\n        var va = geometry.vertices[a];\n        var vb = geometry.vertices[b];\n        var vc = geometry.vertices[c];\n        var dab = va.distanceToSquared(vb);\n        var dbc = vb.distanceToSquared(vc);\n        var dac = va.distanceToSquared(vc);\n        var limitReached = faces.length + il - i >= this.maxFaces;\n\n        if (!limitReached && (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared)) {\n          finalized = false;\n          var m = geometry.vertices.length;\n          var triA = face.clone();\n          var triB = face.clone();\n\n          if (dab >= dbc && dab >= dac) {\n            var vm = va.clone();\n            vm.lerp(vb, 0.5);\n            triA.a = a;\n            triA.b = m;\n            triA.c = c;\n            triB.a = m;\n            triB.b = b;\n            triB.c = c;\n\n            if (face.vertexNormals.length === 3) {\n              var vnm = face.vertexNormals[0].clone();\n              vnm.lerp(face.vertexNormals[1], 0.5);\n              triA.vertexNormals[1].copy(vnm);\n              triB.vertexNormals[0].copy(vnm);\n            }\n\n            if (face.vertexColors.length === 3) {\n              var vcm = face.vertexColors[0].clone();\n              vcm.lerp(face.vertexColors[1], 0.5);\n              triA.vertexColors[1].copy(vcm);\n              triB.vertexColors[0].copy(vcm);\n            }\n\n            edge = 0;\n          } else if (dbc >= dab && dbc >= dac) {\n            var vm = vb.clone();\n            vm.lerp(vc, 0.5);\n            triA.a = a;\n            triA.b = b;\n            triA.c = m;\n            triB.a = m;\n            triB.b = c;\n            triB.c = a;\n\n            if (face.vertexNormals.length === 3) {\n              var vnm = face.vertexNormals[1].clone();\n              vnm.lerp(face.vertexNormals[2], 0.5);\n              triA.vertexNormals[2].copy(vnm);\n              triB.vertexNormals[0].copy(vnm);\n              triB.vertexNormals[1].copy(face.vertexNormals[2]);\n              triB.vertexNormals[2].copy(face.vertexNormals[0]);\n            }\n\n            if (face.vertexColors.length === 3) {\n              var vcm = face.vertexColors[1].clone();\n              vcm.lerp(face.vertexColors[2], 0.5);\n              triA.vertexColors[2].copy(vcm);\n              triB.vertexColors[0].copy(vcm);\n              triB.vertexColors[1].copy(face.vertexColors[2]);\n              triB.vertexColors[2].copy(face.vertexColors[0]);\n            }\n\n            edge = 1;\n          } else {\n            var vm = va.clone();\n            vm.lerp(vc, 0.5);\n            triA.a = a;\n            triA.b = b;\n            triA.c = m;\n            triB.a = m;\n            triB.b = b;\n            triB.c = c;\n\n            if (face.vertexNormals.length === 3) {\n              var vnm = face.vertexNormals[0].clone();\n              vnm.lerp(face.vertexNormals[2], 0.5);\n              triA.vertexNormals[2].copy(vnm);\n              triB.vertexNormals[0].copy(vnm);\n            }\n\n            if (face.vertexColors.length === 3) {\n              var vcm = face.vertexColors[0].clone();\n              vcm.lerp(face.vertexColors[2], 0.5);\n              triA.vertexColors[2].copy(vcm);\n              triB.vertexColors[0].copy(vcm);\n            }\n\n            edge = 2;\n          }\n\n          faces.push(triA, triB);\n          geometry.vertices.push(vm);\n\n          for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n            if (geometry.faceVertexUvs[j].length) {\n              var uvs = geometry.faceVertexUvs[j][i];\n              var uvA = uvs[0];\n              var uvB = uvs[1];\n              var uvC = uvs[2]; // AB\n\n              if (edge === 0) {\n                var uvM = uvA.clone();\n                uvM.lerp(uvB, 0.5);\n                var uvsTriA = [uvA.clone(), uvM.clone(), uvC.clone()];\n                var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()]; // BC\n              } else if (edge === 1) {\n                var uvM = uvB.clone();\n                uvM.lerp(uvC, 0.5);\n                var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n                var uvsTriB = [uvM.clone(), uvC.clone(), uvA.clone()]; // AC\n              } else {\n                var uvM = uvA.clone();\n                uvM.lerp(uvC, 0.5);\n                var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n                var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n              }\n\n              faceVertexUvs[j].push(uvsTriA, uvsTriB);\n            }\n          }\n        } else {\n          faces.push(face);\n\n          for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n            faceVertexUvs[j].push(geometry.faceVertexUvs[j][i]);\n          }\n        }\n      }\n    }\n\n    geometry.faces = faces;\n    geometry.faceVertexUvs = faceVertexUvs;\n  }\n\n  if (isBufferGeometry) {\n    return new BufferGeometry().fromGeometry(geometry);\n  } else {\n    return geometry;\n  }\n};\n\nexport { TessellateModifier };","map":{"version":3,"names":["BufferGeometry","Face3","Geometry","TessellateModifier","maxEdgeLength","maxIterations","maxFaces","Infinity","prototype","modify","geometry","isBufferGeometry","fromBufferGeometry","clone","mergeVertices","finalized","iteration","maxEdgeLengthSquared","edge","faces","length","faceVertexUvs","i","il","face","a","b","c","va","vertices","vb","vc","dab","distanceToSquared","dbc","dac","limitReached","m","triA","triB","vm","lerp","vertexNormals","vnm","copy","vertexColors","vcm","push","j","jl","uvs","uvA","uvB","uvC","uvM","uvsTriA","uvsTriB","fromGeometry"],"sources":["/Users/khuong/Downloads/avatar-homepage-demo-forked/node_modules/three/examples/jsm/modifiers/TessellateModifier.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFace3,\n\tGeometry\n} from \"../../../build/three.module.js\";\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nvar TessellateModifier = function ( maxEdgeLength = 0.1, maxIterations = 6, maxFaces = Infinity ) {\n\n\tthis.maxEdgeLength = maxEdgeLength;\n\tthis.maxIterations = maxIterations;\n\tthis.maxFaces = maxFaces;\n\n};\n\n// Applies the \"modify\" pattern\nTessellateModifier.prototype.modify = function ( geometry ) {\n\n\tconst isBufferGeometry = geometry.isBufferGeometry;\n\n\tif ( isBufferGeometry ) {\n\n\t\tgeometry = new Geometry().fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry = geometry.clone();\n\n\t}\n\n\tgeometry.mergeVertices( 6 );\n\n\tlet finalized = false;\n\tlet iteration = 0;\n\tconst maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n\n\tlet edge;\n\n\twhile ( ! finalized && iteration < this.maxIterations && geometry.faces.length < this.maxFaces ) {\n\n\t\tconst faces = [];\n\t\tconst faceVertexUvs = [];\n\n\t\tfinalized = true;\n\t\titeration ++;\n\n\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tfaceVertexUvs[ i ] = [];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\n\n\t\t\tconst face = geometry.faces[ i ];\n\n\t\t\tif ( face instanceof Face3 ) {\n\n\t\t\t\tconst a = face.a;\n\t\t\t\tconst b = face.b;\n\t\t\t\tconst c = face.c;\n\n\t\t\t\tconst va = geometry.vertices[ a ];\n\t\t\t\tconst vb = geometry.vertices[ b ];\n\t\t\t\tconst vc = geometry.vertices[ c ];\n\n\t\t\t\tconst dab = va.distanceToSquared( vb );\n\t\t\t\tconst dbc = vb.distanceToSquared( vc );\n\t\t\t\tconst dac = va.distanceToSquared( vc );\n\n\t\t\t\tconst limitReached = ( faces.length + il - i ) >= this.maxFaces;\n\n\t\t\t\tif ( ! limitReached && ( dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared ) ) {\n\n\t\t\t\t\tfinalized = false;\n\n\t\t\t\t\tconst m = geometry.vertices.length;\n\n\t\t\t\t\tconst triA = face.clone();\n\t\t\t\t\tconst triB = face.clone();\n\n\t\t\t\t\tif ( dab >= dbc && dab >= dac ) {\n\n\t\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\t\tvm.lerp( vb, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = m;\n\t\t\t\t\t\ttriA.c = c;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = b;\n\t\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 1 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 1 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 1 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 1 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 0;\n\n\t\t\t\t\t} else if ( dbc >= dab && dbc >= dac ) {\n\n\t\t\t\t\t\tvar vm = vb.clone();\n\t\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = b;\n\t\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = c;\n\t\t\t\t\t\ttriB.c = a;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 1 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 1 ].copy( face.vertexNormals[ 2 ] );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 2 ].copy( face.vertexNormals[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 1 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 1 ].copy( face.vertexColors[ 2 ] );\n\t\t\t\t\t\t\ttriB.vertexColors[ 2 ].copy( face.vertexColors[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 1;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = b;\n\t\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = b;\n\t\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaces.push( triA, triB );\n\t\t\t\t\tgeometry.vertices.push( vm );\n\n\t\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\n\n\t\t\t\t\t\t\tconst uvs = geometry.faceVertexUvs[ j ][ i ];\n\n\t\t\t\t\t\t\tconst uvA = uvs[ 0 ];\n\t\t\t\t\t\t\tconst uvB = uvs[ 1 ];\n\t\t\t\t\t\t\tconst uvC = uvs[ 2 ];\n\n\t\t\t\t\t\t\t// AB\n\n\t\t\t\t\t\t\tif ( edge === 0 ) {\n\n\t\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvB, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvM.clone(), uvC.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t\t// BC\n\n\t\t\t\t\t\t\t} else if ( edge === 1 ) {\n\n\t\t\t\t\t\t\t\tvar uvM = uvB.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvC.clone(), uvA.clone() ];\n\n\t\t\t\t\t\t\t\t// AC\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaces.push( face );\n\n\t\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.faces = faces;\n\t\tgeometry.faceVertexUvs = faceVertexUvs;\n\n\t}\n\n\tif ( isBufferGeometry ) {\n\n\t\treturn new BufferGeometry().fromGeometry( geometry );\n\n\t} else {\n\n\t\treturn geometry;\n\n\t}\n\n};\n\nexport { TessellateModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}