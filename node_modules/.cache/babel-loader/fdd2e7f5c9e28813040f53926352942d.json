{"ast":null,"code":"function mergeRefs(refs) {\n  return function (value) {\n    refs.forEach(function (ref) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nexport default mergeRefs;","map":{"version":3,"sources":["../src/index.tsx"],"names":["mergeRefs","refs","ref"],"mappings":"SAEwBA,S,CACtBC,I,EAAAA;EAEA,OAAO,UAAA,KAAA,EAAA;IACLA,IAAI,CAAJA,OAAAA,CAAa,UAAA,GAAA,EAAA;MACX,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;QAC7BC,GAAG,CAAHA,KAAG,CAAHA;MADF,CAAA,MAEO,IAAIA,GAAG,IAAP,IAAA,EAAiB;QACrBA,GAAwC,CAAxCA,OAAAA,GAAAA,KAAAA;MACF;IALHD,CAAAA;EADF,CAAA;AASD","sourcesContent":["import * as React from \"react\";\n\nexport default function mergeRefs<T = any>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}