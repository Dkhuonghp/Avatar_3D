{"ast":null,"code":"import{useEffect,useMemo}from'react';import{useThree}from'react-three-fiber';import*as THREE from'three';export var useMouse3D=function useMouse3D(plane){var callback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(){};var _useThree=useThree(),gl=_useThree.gl,camera=_useThree.camera;var bounds=gl.domElement.getBoundingClientRect();var _useMemo=useMemo(function(){var position=new THREE.Vector3();var mouse=new THREE.Vector2();// We need a new raycaster that works beyond the canvas\nvar raycaster=new THREE.Raycaster();return{position:position,mouse:mouse,raycaster:raycaster};},[]),position=_useMemo.position,mouse=_useMemo.mouse,raycaster=_useMemo.raycaster;useEffect(function(){var onMouseMove=function onMouseMove(e){mouse.x=(e.clientX-bounds.x)/bounds.width*2-1;mouse.y=(e.clientY-bounds.y)/bounds.height*-2+1;raycaster.setFromCamera(mouse,camera);raycaster.ray.intersectPlane(plane,position);callback(position);};var listener=window.addEventListener('mousemove',onMouseMove);return function(){return window.removeEventListener('mousemove',listener);};},[bounds]);return position;};","map":{"version":3,"names":["useEffect","useMemo","useThree","THREE","useMouse3D","plane","callback","gl","camera","bounds","domElement","getBoundingClientRect","position","Vector3","mouse","Vector2","raycaster","Raycaster","onMouseMove","e","x","clientX","width","y","clientY","height","setFromCamera","ray","intersectPlane","listener","window","addEventListener","removeEventListener"],"sources":["/Users/khuong/Downloads/avatar-homepage-demo-forked/src/Mouse.js"],"sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport { useThree } from 'react-three-fiber'\r\nimport * as THREE from 'three'\r\n\r\nexport const useMouse3D = (plane, callback = () => {}) => {\r\n  const { gl, camera } = useThree()\r\n  const bounds = gl.domElement.getBoundingClientRect()\r\n  const { position, mouse, raycaster } = useMemo(() => {\r\n    const position = new THREE.Vector3()\r\n    const mouse = new THREE.Vector2()\r\n    // We need a new raycaster that works beyond the canvas\r\n    const raycaster = new THREE.Raycaster()\r\n    return { position, mouse, raycaster }\r\n  }, [])\r\n  useEffect(() => {\r\n    const onMouseMove = (e) => {\r\n      mouse.x = ((e.clientX - bounds.x) / bounds.width) * 2 - 1\r\n      mouse.y = ((e.clientY - bounds.y) / bounds.height) * -2 + 1\r\n      raycaster.setFromCamera(mouse, camera)\r\n      raycaster.ray.intersectPlane(plane, position)\r\n      callback(position)\r\n    }\r\n    const listener = window.addEventListener('mousemove', onMouseMove)\r\n    return () => window.removeEventListener('mousemove', listener)\r\n  }, [bounds])\r\n  return position\r\n}\r\n"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,CACA,OAASC,QAAT,KAAyB,mBAAzB,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAEA,MAAO,IAAMC,WAAU,CAAG,QAAbA,WAAa,CAACC,KAAD,CAAgC,IAAxBC,SAAwB,2DAAb,UAAM,CAAE,CAAK,CACxD,cAAuBJ,QAAQ,EAA/B,CAAQK,EAAR,WAAQA,EAAR,CAAYC,MAAZ,WAAYA,MAAZ,CACA,GAAMC,OAAM,CAAGF,EAAE,CAACG,UAAH,CAAcC,qBAAd,EAAf,CACA,aAAuCV,OAAO,CAAC,UAAM,CACnD,GAAMW,SAAQ,CAAG,GAAIT,MAAK,CAACU,OAAV,EAAjB,CACA,GAAMC,MAAK,CAAG,GAAIX,MAAK,CAACY,OAAV,EAAd,CACA;AACA,GAAMC,UAAS,CAAG,GAAIb,MAAK,CAACc,SAAV,EAAlB,CACA,MAAO,CAAEL,QAAQ,CAARA,QAAF,CAAYE,KAAK,CAALA,KAAZ,CAAmBE,SAAS,CAATA,SAAnB,CAAP,CACD,CAN6C,CAM3C,EAN2C,CAA9C,CAAQJ,QAAR,UAAQA,QAAR,CAAkBE,KAAlB,UAAkBA,KAAlB,CAAyBE,SAAzB,UAAyBA,SAAzB,CAOAhB,SAAS,CAAC,UAAM,CACd,GAAMkB,YAAW,CAAG,QAAdA,YAAc,CAACC,CAAD,CAAO,CACzBL,KAAK,CAACM,CAAN,CAAW,CAACD,CAAC,CAACE,OAAF,CAAYZ,MAAM,CAACW,CAApB,EAAyBX,MAAM,CAACa,KAAjC,CAA0C,CAA1C,CAA8C,CAAxD,CACAR,KAAK,CAACS,CAAN,CAAW,CAACJ,CAAC,CAACK,OAAF,CAAYf,MAAM,CAACc,CAApB,EAAyBd,MAAM,CAACgB,MAAjC,CAA2C,CAAC,CAA5C,CAAgD,CAA1D,CACAT,SAAS,CAACU,aAAV,CAAwBZ,KAAxB,CAA+BN,MAA/B,EACAQ,SAAS,CAACW,GAAV,CAAcC,cAAd,CAA6BvB,KAA7B,CAAoCO,QAApC,EACAN,QAAQ,CAACM,QAAD,CAAR,CACD,CAND,CAOA,GAAMiB,SAAQ,CAAGC,MAAM,CAACC,gBAAP,CAAwB,WAAxB,CAAqCb,WAArC,CAAjB,CACA,MAAO,kBAAMY,OAAM,CAACE,mBAAP,CAA2B,WAA3B,CAAwCH,QAAxC,CAAN,EAAP,CACD,CAVQ,CAUN,CAACpB,MAAD,CAVM,CAAT,CAWA,MAAOG,SAAP,CACD,CAtBM"},"metadata":{},"sourceType":"module"}