var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/css/index.ts
__export(exports, {
  animation: () => animation,
  css: () => css,
  keyframes: () => keyframes
});
var _ = __toModule(require(".."));
var create = (factory) => {
  const instances = new WeakMap();
  const build = (tw) => {
    function toString() {
      return tw(this);
    }
    const cache = new Map();
    const evaluateFunctions = (key, value) => typeof value === "function" ? tw(value) : value;
    return (rules) => {
      const key = JSON.stringify(rules, evaluateFunctions);
      let directive = cache.get(key);
      if (!directive) {
        directive = Object.defineProperties(factory(rules, key), {
          valueOf: {
            value: toString
          },
          toString: {
            value: toString
          },
          toJSON: {
            value: () => rules
          }
        });
        cache.set(key, directive);
        if (cache.size > 1e4) {
          cache.delete(cache.keys().next().value);
        }
      }
      return directive;
    };
  };
  return function(rules) {
    const tw = this || _.tw;
    let instance = instances.get(tw);
    if (!instance) {
      instance = build(tw);
      instances.set(tw, instance);
    }
    return instance(rules);
  };
};
var css = create((rules) => {
  const plugin = () => rules;
  return ({tw}) => tw(plugin);
});
var keyframes = create((waypoints, key) => {
  const id = _.hash(key);
  const plugin = () => ({
    [`@keyframes ${id}`]: waypoints
  });
  return ({tw}) => {
    tw(plugin);
    return id;
  };
});
function animation(value, waypoints) {
  return css.call(this, {
    ...typeof value === "object" ? value : {animation: value},
    animationName: typeof waypoints === "function" ? waypoints : keyframes.call(this, waypoints)
  });
}
//# sourceMappingURL=css.cjs.map
