var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/server/index.ts
__export(exports, {
  asyncVirtualSheet: () => asyncVirtualSheet,
  getStyleTag: () => getStyleTag,
  getStyleTagProperties: () => getStyleTagProperties,
  virtualSheet: () => virtualSheet
});
var async_hooks = __toModule(require("async_hooks"));

// src/internal/dom.ts
var STYLE_ELEMENT_ID = "__twind";

// src/sheets/index.ts
var createStorage = () => {
  const callbacks = [];
  let state = [];
  const invoke = (callback, index) => state[index] = callback(state[index]);
  return {
    init: (callback) => invoke(callback, callbacks.push(callback) - 1),
    reset: (snapshot = []) => {
      ;
      [snapshot, state] = [state, snapshot];
      callbacks.forEach(invoke);
      return snapshot;
    }
  };
};
var virtualSheet = () => {
  const storage = createStorage();
  let target;
  storage.init((value = []) => target = value);
  return {
    ...storage,
    get target() {
      return [...target];
    },
    insert: (rule, index) => target.splice(index, 0, rule)
  };
};
var getStyleTagProperties = (sheet) => ({
  id: STYLE_ELEMENT_ID,
  textContent: (Array.isArray(sheet) ? sheet : sheet.target).join("")
});
var getStyleTag = (sheet, attributes) => {
  const {id, textContent} = getStyleTagProperties(sheet);
  attributes = {...attributes, id};
  return `<style${Object.keys(attributes).reduce((attrs, key) => `${attrs} ${key}=${JSON.stringify(attributes[key])}`, "")}>${textContent}</style>`;
};

// src/server/index.ts
var asyncVirtualSheet = () => {
  const sheet = virtualSheet();
  const initial = sheet.reset();
  const store = new Map();
  const asyncHook = async_hooks.createHook({
    init(asyncId, type, triggerAsyncId) {
      const snapshot = store.get(triggerAsyncId);
      if (snapshot) {
        store.set(asyncId, snapshot);
      }
    },
    before(asyncId) {
      const snapshot = store.get(asyncId);
      if (snapshot) {
        sheet.reset(snapshot.state);
      }
    },
    after(asyncId) {
      const snapshot = store.get(asyncId);
      if (snapshot) {
        snapshot.state = sheet.reset(initial);
      }
    },
    destroy(asyncId) {
      store.delete(asyncId);
    }
  }).enable();
  return {
    get target() {
      return sheet.target;
    },
    insert: sheet.insert,
    init: sheet.init,
    reset: () => {
      const asyncId = async_hooks.executionAsyncId();
      const snapshot = store.get(asyncId);
      if (snapshot) {
        snapshot.state = void 0;
      } else {
        store.set(asyncId, {state: void 0});
      }
      sheet.reset();
    },
    enable: () => asyncHook.enable(),
    disable: () => asyncHook.disable()
  };
};
//# sourceMappingURL=server.cjs.map
