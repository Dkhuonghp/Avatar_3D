interface Sheet<T = unknown> {
    readonly target: T;
    insert: (rule: string, index: number) => void;
    init?: SheetInit;
}
declare type SheetInitCallback<T = unknown> = (value?: T | undefined) => T;
interface SheetInit {
    /**
     * Register a function that should be called to use a snapshot state or create a new state.
     */
    <T>(callback: SheetInitCallback<T>): T;
}

/**
 * Allows to reset and snaphot the current state of an sheet and
 * in extension the internal mutable state (caches, ...) of `tw`.
 */
interface Storage {
    /**
     * Register a function that should be called to create a new state.
     */
    init: SheetInit;
    /**
     * Creates a snapshot of the current state, invokes all init callbacks to create a fresh state
     * and returns the snaphot.
     */
    reset: (snapshot?: unknown[] | undefined) => unknown[];
}
interface VirtualSheet extends Sheet<string[]>, Storage {
    init: SheetInit;
}
/**
 * Creates an sheet which collects style rules into an array.
 */
declare const virtualSheet: () => VirtualSheet;
interface StyleTagProperties {
    id: string;
    textContent: string;
}
interface HasTarget {
    readonly target: readonly string[];
}
declare type StyleTagSheet = HasTarget | readonly string[];
/**
 * Transforms css rules into `<style>` tag properties.
 */
declare const getStyleTagProperties: (sheet: StyleTagSheet) => StyleTagProperties;
/**
 * Transforms css rules into a `<style>` tag string.
 */
declare const getStyleTag: (sheet: StyleTagSheet, attributes?: Record<string, string> | undefined) => string;

interface AsyncVirtualSheet extends Sheet {
    readonly target: readonly string[];
    init: SheetInit;
    reset: () => void;
    enable: () => void;
    disable: () => void;
}
declare const asyncVirtualSheet: () => AsyncVirtualSheet;

export { AsyncVirtualSheet, Storage, StyleTagProperties, StyleTagSheet, VirtualSheet, asyncVirtualSheet, getStyleTag, getStyleTagProperties, virtualSheet };
//# sourceMappingURL=server.d.ts.map
