var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/observe/index.ts
__export(exports, {
  createObserver: () => createObserver,
  observe: () => observe
});
var _ = __toModule(require(".."));
var caches = new WeakMap();
var getCache = (tw) => {
  let rulesToClassCache = caches.get(tw);
  if (!rulesToClassCache) {
    rulesToClassCache = new Map();
    caches.set(tw, rulesToClassCache);
  }
  return rulesToClassCache;
};
var createObserver = ({tw = _.tw} = {}) => {
  const rulesToClassCache = getCache(tw);
  const handleMutation = ({target, addedNodes}) => {
    var _a;
    const rules = (_a = target.getAttribute) == null ? void 0 : _a.call(target, "class");
    if (rules) {
      let className = rulesToClassCache.get(rules);
      if (!className) {
        className = tw(rules);
        rulesToClassCache.set(rules, className);
        if (rulesToClassCache.size > 1e4) {
          rulesToClassCache.delete(rulesToClassCache.keys().next().value);
        }
      }
      if (rules !== className) {
        ;
        target.setAttribute("class", className);
      }
    }
    for (let index = addedNodes.length; index--; ) {
      const node = addedNodes[index];
      handleMutations([
        {
          target: node,
          addedNodes: node.children || []
        }
      ]);
    }
  };
  const handleMutations = (mutations) => mutations.forEach(handleMutation);
  const observer = new MutationObserver(handleMutations);
  return {
    observe(target) {
      handleMutations([{target, addedNodes: [target]}]);
      observer.observe(target, {
        attributes: true,
        attributeFilter: ["class"],
        subtree: true,
        childList: true
      });
      return this;
    },
    disconnect() {
      observer.disconnect();
      return this;
    }
  };
};
function observe(target, config = this) {
  return createObserver(config).observe(target);
}
//# sourceMappingURL=observe.cjs.map
