'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');
var RGBELoader = require('three/examples/jsm/loaders/RGBELoader');
var useAsset = require('use-asset');

var presetsObj = {
  sunset: 'venice_sunset_1k.hdr',
  dawn: 'kiara_1_dawn_1k.hdr',
  night: 'dikhololo_night_1k.hdr',
  warehouse: 'empty_warehouse_01_1k.hdr',
  forest: 'forest_slope_1k.hdr',
  apartment: 'lebombo_1k.hdr',
  studio: 'studio_small_03_1k.hdr',
  city: 'potsdamer_platz_1k.hdr',
  park: 'rooitou_park_1k.hdr',
  lobby: 'st_fagans_interior_1k.hdr'
};

function getTexture(texture, gen, isCubeMap) {
  if (isCubeMap) {
    gen.compileEquirectangularShader();
    return gen.fromCubemap(texture).texture;
  }

  return gen.fromEquirectangular(texture).texture;
}

var CUBEMAP_ROOT = 'https://rawcdn.githack.com/mattrossman/drei-assets/b597559ff62f85ec691df28cbea5ecb1263a2085';
function Environment(_ref) {
  var _ref$background = _ref.background,
      background = _ref$background === void 0 ? false : _ref$background,
      _ref$files = _ref.files,
      files = _ref$files === void 0 ? ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'] : _ref$files,
      _ref$path = _ref.path,
      path = _ref$path === void 0 ? '/' : _ref$path,
      _ref$preset = _ref.preset,
      preset = _ref$preset === void 0 ? undefined : _ref$preset;

  if (preset) {
    if (!(preset in presetsObj)) {
      throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));
    }

    files = presetsObj[preset];
    path = CUBEMAP_ROOT + '/hdri/';
  }

  var _useThree = reactThreeFiber.useThree(),
      gl = _useThree.gl,
      scene = _useThree.scene;

  var isCubeMap = Array.isArray(files);
  var loader = isCubeMap ? THREE.CubeTextureLoader : RGBELoader.RGBELoader; // @ts-expect-error

  var loaderResult = reactThreeFiber.useLoader(loader, isCubeMap ? [files] : files, function (loader) {
    return loader.setPath(path);
  });
  var map = isCubeMap ? loaderResult[0] : loaderResult; // PMREMGenerator takes its sweet time to generate the env-map,
  // Let's make this part of suspense, or else it just yields a frame-skip

  var texture = useAsset.useAsset(function () {
    return new Promise(function (res) {
      var gen = new THREE.PMREMGenerator(gl);
      var texture = getTexture(map, gen, isCubeMap);
      gen.dispose();
      map.dispose();
      res(texture);
    });
  }, [map, background]);
  React.useLayoutEffect(function () {
    var oldbg = scene.background;
    var oldenv = scene.environment;
    if (background) scene.background = texture;
    scene.environment = texture;
    return function () {
      scene.environment = oldenv;
      scene.background = oldbg;
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [texture]);
  return null;
}

exports.Environment = Environment;
