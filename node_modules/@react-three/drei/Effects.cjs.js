'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var mergeRefs = require('react-merge-refs');
var THREE = require('three');
var EffectComposer = require('three/examples/jsm/postprocessing/EffectComposer');
var RenderPass = require('three/examples/jsm/postprocessing/RenderPass');
var ShaderPass = require('three/examples/jsm/postprocessing/ShaderPass');
var GammaCorrectionShader = require('three/examples/jsm/shaders/GammaCorrectionShader');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);

reactThreeFiber.extend({
  EffectComposer: EffectComposer.EffectComposer,
  RenderPass: RenderPass.RenderPass,
  ShaderPass: ShaderPass.ShaderPass
});
var isWebGL2Available = function isWebGL2Available() {
  try {
    var canvas = document.createElement('canvas');
    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));
  } catch (e) {
    return false;
  }
};
var Effects = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$multisamping = _ref.multisamping,
      multisamping = _ref$multisamping === void 0 ? 8 : _ref$multisamping,
      _ref$renderIndex = _ref.renderIndex,
      renderIndex = _ref$renderIndex === void 0 ? 1 : _ref$renderIndex,
      _ref$disableGamma = _ref.disableGamma,
      disableGamma = _ref$disableGamma === void 0 ? false : _ref$disableGamma,
      _ref$disableRenderPas = _ref.disableRenderPass,
      disableRenderPass = _ref$disableRenderPas === void 0 ? false : _ref$disableRenderPas,
      props = _objectWithoutPropertiesLoose__default['default'](_ref, ["children", "multisamping", "renderIndex", "disableGamma", "disableRenderPass"]);

  var composer = React.useRef();

  var _useThree = reactThreeFiber.useThree(),
      scene = _useThree.scene,
      camera = _useThree.camera,
      gl = _useThree.gl,
      size = _useThree.size;

  var _React$useState = React.useState(function () {
    if (isWebGL2Available() && multisamping > 0) {
      var t = new THREE.WebGLMultisampleRenderTarget(size.width, size.height, {
        format: THREE.RGBAFormat,
        encoding: THREE.sRGBEncoding
      });
      t.samples = 8;
      return t;
    }
  }),
      target = _React$useState[0];

  React.useEffect(function () {
    var _composer$current, _composer$current2;

    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());
  }, [gl, size]);
  reactThreeFiber.useFrame(function () {
    var _composer$current3;

    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  return /*#__PURE__*/React.createElement("effectComposer", _extends__default['default']({
    ref: mergeRefs__default['default']([ref, composer]),
    args: [gl, target]
  }, props), !disableRenderPass && /*#__PURE__*/React.createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  }), !disableGamma && /*#__PURE__*/React.createElement("shaderPass", {
    attachArray: "passes",
    args: [GammaCorrectionShader.GammaCorrectionShader]
  }), children);
});

exports.Effects = Effects;
exports.isWebGL2Available = isWebGL2Available;
