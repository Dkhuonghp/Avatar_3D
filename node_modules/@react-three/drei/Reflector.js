import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useMemo, createElement, Children } from 'react';
import { Reflector as Reflector$1 } from 'three/examples/jsm/objects/Reflector';

const Reflector = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    color,
    textureWidth,
    textureHeight,
    clipBias,
    shader,
    encoding
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "color", "textureWidth", "textureHeight", "clipBias", "shader", "encoding"]);

  const reflector = useMemo(() => new Reflector$1(undefined, {
    color,
    textureWidth,
    textureHeight,
    clipBias,
    shader,
    encoding
  }), [clipBias, color, encoding, shader, textureHeight, textureWidth]);
  return /*#__PURE__*/createElement("primitive", _extends({
    dispose: undefined,
    object: reflector,
    ref: ref
  }, props), Children.only(children));
});

export { Reflector };
