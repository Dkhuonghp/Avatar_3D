import { useRef, useEffect } from 'react';
import { Geometry, BufferGeometry } from 'three';
import { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier';

function useSubdivision(subdivisions) {
  const ref = useRef();
  const original = useRef();
  const modifier = useRef();
  useEffect(() => {
    if (!original.current) {
      original.current = ref.current.geometry.clone();
      modifier.current = new SubdivisionModifier(parseInt(subdivisions));
    }
  }, [subdivisions]);
  useEffect(() => {
    modifier.current.subdivisions = subdivisions;
  }, [subdivisions]);
  useEffect(() => {
    if (original.current && ref.current) {
      let geometry = new Geometry();

      if (original.current instanceof BufferGeometry) {
        geometry.fromBufferGeometry(original.current);
      } else {
        geometry = original.current.clone();
      }

      const bufferGeometry = new BufferGeometry();
      const subdivided = bufferGeometry.fromGeometry(modifier.current.modify(geometry));
      ref.current.geometry = subdivided;
    }
  }, [subdivisions]);
  return ref;
}

export { useSubdivision };
